#!/usr/bin/env python3
"""
Stage3 Step1: XMIDI Emotion/Genre Assignment

XMIDI„Éô„Éº„Çπ„ÅÆÊÑüÊÉÖ„Éª„Ç∏„É£„É≥„É´ÊïôÂ∏´„Çí‰Ωø„ÅÑ„ÄÅStage2„É°„Éà„É™„ÇØ„Çπ„Åã„Çâ
valence/arousal, emotion, genre„ÇíËá™ÂãïÊé®ÂÆö„Åó„Å¶loop_summary„Å´ËøΩÂä†„ÄÇ

Usage:
    python scripts/assign_labels.py \
        --loop-summary output/drumloops_stage2/loop_summary.csv \
        --schema configs/labels/labels_schema.yaml \
        --output output/drumloops_stage2/loop_summary_labeled.csv
"""

from __future__ import annotations

import argparse
import csv
import json
import math
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import yaml
import numpy as np
from dataclasses import dataclass


@dataclass
class EmotionProfile:
    """ÊÑüÊÉÖ„Éó„É≠„Éï„Ç°„Ç§„É´ (Valence/Arousal)"""

    valence: float  # -1.0 to 1.0
    arousal: float  # 0.0 to 1.0
    confidence: float = 0.0

    def to_emotion_label(self) -> str:
        """V/AÂ∫ßÊ®ô„Åã„ÇâÊÑüÊÉÖ„É©„Éô„É´„ÇíÊ±∫ÂÆö"""
        # XMIDIÊ∫ñÊã†„ÅÆ8ÂàÜÈ°û„Éû„ÉÉ„Éî„É≥„Ç∞
        if self.valence > 0.3:
            if self.arousal > 0.7:
                return "intense"  # È´òVÈ´òA
            elif self.arousal > 0.4:
                return "happy"  # È´òV‰∏≠A
            else:
                return "warm"  # È´òV‰ΩéA
        elif self.valence > -0.3:
            if self.arousal > 0.6:
                return "tense"  # ‰∏≠VÈ´òA
            else:
                return "calm"  # ‰∏≠V‰ΩéA
        else:
            if self.arousal > 0.5:
                return "dark"  # ‰ΩéVÈ´òA
            else:
                return "sad"  # ‰ΩéV‰ΩéA

    def to_dict(self) -> Dict[str, Any]:
        return {
            "valence": round(self.valence, 3),
            "arousal": round(self.arousal, 3),
            "confidence": round(self.confidence, 3),
            "label": self.to_emotion_label(),
        }


class LabelAssigner:
    """„É°„Éà„É™„ÇØ„Çπ„Åã„Çâ„É©„Éô„É´„ÇíÊé®ÂÆö"""

    def __init__(self, schema_path: Path):
        with schema_path.open("r", encoding="utf-8") as f:
            self.schema = yaml.safe_load(f)

        self.emotion_classes = self.schema["schema"]["emotion"]["classes"]
        self.genre_classes = self.schema["schema"]["genre"]["classes"]

    def estimate_emotion(self, metrics: Dict[str, Any]) -> EmotionProfile:
        """„É°„Éà„É™„ÇØ„Çπ„Åã„Çâvalence/arousal„ÇíÊé®ÂÆö"""

        # ArousalÊé®ÂÆö („Ç®„Éç„É´„ÇÆ„Éº„ÉªÁ∑äÂºµÂ∫¶)
        velocity_range = float(metrics.get("metrics.velocity_range", 0.5))
        microtiming_rms = float(metrics.get("metrics.microtiming_rms", 10.0))
        accent_rate = float(metrics.get("metrics.accent_rate", 0.1))

        # Ê≠£Ë¶èÂåñ: velocity_range [0-1], microtiming_rms [0-30], accent_rate [0-0.5]
        arousal_velocity = min(1.0, velocity_range)
        arousal_timing = min(1.0, microtiming_rms / 30.0)
        arousal_accent = min(1.0, accent_rate / 0.3)

        arousal = arousal_velocity * 0.5 + arousal_timing * 0.3 + arousal_accent * 0.2
        arousal = max(0.0, min(1.0, arousal))

        # ValenceÊé®ÂÆö („Éù„Ç∏„ÉÜ„Ç£„Éñ/„Éç„Ç¨„ÉÜ„Ç£„Éñ)
        swing_ratio = float(metrics.get("metrics.swing_ratio", 0.5))
        dynamics_range = float(metrics.get("metrics.dynamics_range", 0.5))

        # „Çπ„Ç¶„Ç£„É≥„Ç∞Áéá„ÅåÈ´ò„ÅÑ‚Üí„Éù„Ç∏„ÉÜ„Ç£„ÉñÂÇæÂêë
        # „ÉÄ„Ç§„Éä„Éü„ÇØ„Çπ„É¨„É≥„Ç∏„ÅåÂ∫É„ÅÑ‚ÜíÊÑüÊÉÖË±ä„Åã
        valence_swing = (swing_ratio - 0.5) * 1.5  # 0.5„Çí‰∏≠ÂøÉ„Å´¬±0.75
        valence_dynamics = (dynamics_range - 0.5) * 0.8

        valence = valence_swing + valence_dynamics
        valence = max(-1.0, min(1.0, valence))

        # ‰ø°È†ºÂ∫¶: „É°„Éà„É™„ÇØ„ÇπÊ¨†Êêç„ÅåÂ∞ë„Å™„ÅÑ„Åª„Å©È´ò„ÅÑ
        available_metrics = sum(
            [
                1 if "velocity_range" in str(metrics) else 0,
                1 if "microtiming_rms" in str(metrics) else 0,
                1 if "swing_ratio" in str(metrics) else 0,
                1 if "accent_rate" in str(metrics) else 0,
            ]
        )
        confidence = available_metrics / 4.0

        return EmotionProfile(valence=valence, arousal=arousal, confidence=confidence)

    def estimate_genre(self, metrics: Dict[str, Any]) -> Tuple[str, float]:
        """„É°„Éà„É™„ÇØ„Çπ„Åã„Çâ„Ç∏„É£„É≥„É´„ÇíÊé®ÂÆö"""

        bpm = float(metrics.get("bpm", 120.0))
        swing_ratio = float(metrics.get("metrics.swing_ratio", 0.5))
        ride_rate = float(metrics.get("metrics.ride_usage_ratio", 0.0))
        hat_ratio = float(metrics.get("metrics.hihat_ratio", 0.0))

        scores: Dict[str, float] = {}

        # Jazz: swingÈ´ò„ÅÑ„ÄÅride‰ΩøÁî®Â§ö„ÅÑ
        if swing_ratio > 0.55 and ride_rate > 0.10:
            scores["jazz"] = 0.7 + (swing_ratio - 0.55) + ride_rate

        # Rock: BPM 90-160„ÄÅhihatÂ§ö„ÅÑ„ÄÅevenÂØÑ„Çä
        if 90 <= bpm <= 160 and hat_ratio > 0.20 and swing_ratio < 0.55:
            scores["rock"] = 0.6 + (hat_ratio * 0.5)

        # Funk: BPM 100-120„ÄÅswing‰∏≠Á®ãÂ∫¶
        if 100 <= bpm <= 120 and 0.50 <= swing_ratio <= 0.60:
            scores["funk"] = 0.5 + (0.55 - abs(swing_ratio - 0.55)) * 2

        # EDM: BPMÈ´ò„ÅÑ„ÄÅeven„Éì„Éº„Éà
        if bpm > 120 and swing_ratio < 0.52:
            scores["edm"] = 0.4 + ((bpm - 120) / 60.0)

        # Hiphop: BPM 80-100„ÄÅswing‰Ωé„ÇÅ
        if 80 <= bpm <= 100 and swing_ratio < 0.54:
            scores["hiphop"] = 0.5 + (100 - bpm) / 40.0

        # „Éá„Éï„Ç©„É´„Éà: pop
        if not scores:
            scores["pop"] = 0.3

        # ÊúÄÈ´ò„Çπ„Ç≥„Ç¢„ÅÆ„Ç∏„É£„É≥„É´„ÇíÈÅ∏Êäû
        best_genre = max(scores.items(), key=lambda x: x[1])
        confidence = min(1.0, best_genre[1])

        return best_genre[0], confidence

    def assign_labels(self, row: Dict[str, Any]) -> Dict[str, Any]:
        """1Ë°å„ÅÆloop_summary„Å´„É©„Éô„É´„ÇíËøΩÂä†"""

        # ÊÑüÊÉÖÊé®ÂÆö
        emotion = self.estimate_emotion(row)
        row["label.emotion"] = emotion.to_emotion_label()
        row["emotion.valence"] = emotion.valence
        row["emotion.arousal"] = emotion.arousal
        row["emotion.confidence"] = emotion.confidence

        # „Ç∏„É£„É≥„É´Êé®ÂÆö
        genre, genre_conf = self.estimate_genre(row)
        row["label.genre"] = genre
        row["genre.confidence"] = genre_conf

        return row


def main():
    parser = argparse.ArgumentParser(description="Assign XMIDI-based emotion/genre labels")
    parser.add_argument(
        "--loop-summary", type=Path, required=True, help="Input loop_summary.csv from Stage2"
    )
    parser.add_argument(
        "--schema",
        type=Path,
        default=Path("configs/labels/labels_schema.yaml"),
        help="Label schema YAML",
    )
    parser.add_argument("--output", type=Path, required=True, help="Output CSV with labels")
    parser.add_argument("--stats-output", type=Path, help="Optional JSON stats output")

    args = parser.parse_args()

    print(f"Loading schema from {args.schema}")
    assigner = LabelAssigner(args.schema)

    print(f"Reading loop summary from {args.loop_summary}")
    rows = []
    with args.loop_summary.open("r", encoding="utf-8", newline="") as f:
        reader = csv.DictReader(f)
        fieldnames = reader.fieldnames

        for row in reader:
            labeled_row = assigner.assign_labels(row)
            rows.append(labeled_row)

    # Êñ∞„Åó„ÅÑ„Ç´„É©„É†ËøΩÂä†
    new_fieldnames = list(fieldnames) + [
        "label.emotion",
        "emotion.valence",
        "emotion.arousal",
        "emotion.confidence",
        "label.genre",
        "genre.confidence",
    ]

    # Âá∫Âäõ
    args.output.parent.mkdir(parents=True, exist_ok=True)
    with args.output.open("w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=new_fieldnames)
        writer.writeheader()
        writer.writerows(rows)

    print(f"‚úÖ Wrote {len(rows)} labeled loops to {args.output}")

    # Áµ±Ë®àÂá∫Âäõ
    if args.stats_output:
        from collections import Counter

        emotion_dist = Counter(row["label.emotion"] for row in rows)
        genre_dist = Counter(row["label.genre"] for row in rows)

        avg_valence = np.mean([float(row["emotion.valence"]) for row in rows])
        avg_arousal = np.mean([float(row["emotion.arousal"]) for row in rows])

        stats = {
            "total_loops": len(rows),
            "emotion_distribution": dict(emotion_dist),
            "genre_distribution": dict(genre_dist),
            "average_valence": round(avg_valence, 3),
            "average_arousal": round(avg_arousal, 3),
        }

        with args.stats_output.open("w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)

        print(f"üìä Stats saved to {args.stats_output}")
        print(f"\nEmotion distribution:")
        for emo, count in emotion_dist.most_common():
            print(f"  {emo:12s}: {count:4d} ({count/len(rows)*100:.1f}%)")
        print(f"\nGenre distribution:")
        for gen, count in genre_dist.most_common():
            print(f"  {gen:12s}: {count:4d} ({count/len(rows)*100:.1f}%)")


if __name__ == "__main__":
    main()
