# OtoKotoba Engine – Global Configuration (main_cfg.yml)
# ----------------------------------------------------
#  ✓ modular_composer.py の `--main-cfg` で読み込み
#  ✓ 各ジェネレーターへ共通パラメータを供給
#  ✓ Section Overrides で拍子/テンポ/ヒューマナイズを上書き可
# ----------------------------------------------------

# ---------------- 1. Global Settings ----------------
global_settings:
  # 楽曲基本情報
  song_title: "OreNoNyoubou_Shudaika"
  time_signature: "4/4" # ← デフォルト拍子
  tempo_bpm: 88 # ← デフォルトテンポ
  # ↓ パッチ前からお使いの方でも互換性を保つようにしておく
  # （CLI で上書きしなければこの default が使われます）
  key_tonic: "F"
  key_mode: "major"

  # 演奏フィール
  swing_ratio: 0.0 # 0 = ストレート, 0.5 = 完全スウィング
  humanize_profile: "soft_reflective" # ▼ fallback (profiles は後述の humanize_profiles セクションに定義)
  default_dynamics_profile: "mp"

  # 外部プロファイル / マップ
  groove_profile_path: "../data/groove_profile.json" # 微小タイミング揺らぎの統計
  groove_strength: 1.0 # 0.0-1.0 のスケールで強度調整
  tempo_map_path: "../data/tempo_map.json" # rit. / accel. を含む細粒度 BPM 変化
  onset_heatmap_json: "../data/vocal_onset_heatmap.json" # ボーカル発音のヒートマップ
  heatmap_resolution: 16 # ヒートマップ解像度（省略可）
  heatmap_threshold: 2 # 強度判定の閾値（省略可）
  accent_threshold: 0.6
  ghost_density_range: [0.3, 0.8]
  random_walk_step: 8 # ±8 の範囲で bar ごとに揺らぐ
  # ベース音域の上限を変更したい場合は bass_range_hi を指定 (デフォルト72)
  bass_range_hi: 64
  fill_emotion_threshold: 0.8
  fill_fade_beats: 2.0
  use_consonant_sync: true
  consonant_sync_mode: bar # 'bar' or 'note'

# ------------------- 2. Paths -----------------------
paths:
  chordmap_path: "../data/processed_chordmap_with_emotion.yaml"
  rhythm_library_path: "../data/rhythm_library.yml"
  arrangement_overrides_path: "../data/arrangement_overrides.json"
  vocal_heatmap_path: "../data/heatmap.json"
  vocal_note_data_path: "../data/vocal_note_data_ore.json"
  drum_pattern_files: ["../data/drum_patterns.yml"]
  output_dir: "../midi_output"
  vocal_midi_path_for_drums: "../data/vocal.mid"
  vocal_peak_json_for_drums: "../data/peaks.json"

consonant_sync:
  lag_ms: 10.0
  min_distance_beats: 0.25
  sustain_threshold_ms: 120.0
  note_radius_ms: 30.0
  velocity_boost: 6

# ---------------- 3. Part Defaults ------------------
part_defaults:
  piano:
    apply_pedal: true
    rh_velocity: 65
    lh_velocity: 60
    rh_style_keyword: "piano_rh_block_chords_quarters"
    lh_style_keyword: "piano_lh_roots_half"
    humanize_profile: ""
    dynamics_profile: ""
    articulation: "sustain"
    anticipatory_chord: false
    ml_velocity_model_path: "outputs/checkpoints/last.ckpt"

  guitar:
    rhythm_key: "guitar_ballad_arpeggio"
    velocity: 74
    palm_mute: false
    strum_direction_cycle: "down,down,up,up"
    humanize_profile: ""
    dynamics_profile: ""
    articulation: "fingerstyle"
    ml_velocity_model_path: "outputs/checkpoints/last.ckpt"

  bass:
    rhythm_key: "bass_pump_8th_octaves"
    velocity: 80
    mirror_melody: false
    weak_beat_style: "none"
    humanize_profile: ""
    dynamics_profile: ""
    articulation: "finger"
    ml_velocity_model_path: "outputs/checkpoints/last.ckpt"

  drums:
    style_key: "ballad_soft_kick_snare_8th_hat"
    ghost_hat_on_offbeat: true
    additional_kick_density: 0.2
    humanize_profile: ""
    dynamics_profile: ""
    cond: { style: funk }
    ml_velocity_model_path: "outputs/checkpoints/last.ckpt"

  strings:
    role: "pad"
    instrument_name: "Orchestral Strings" # ← 追加
    rhythm_key: "strings_melody_basic"
    humanize_profile: "gentle_push"
    ml_velocity_model_path: "outputs/checkpoints/last.ckpt"

  percussion:
    cond: { style: lofi }
    backend: perc_ngram
    model_path: models/perc_ngram.pkl

# ---------- 4. Section Overrides (拍子/テンポ/HZ) ----------
# processed_chordmap_with_emotion.yaml でセクションを定義している場合、
# ここで *拍子*・*テンポ*・*humanize_profile* を上書きできます。
# キーはセクションラベルに一致させてください（スペース可）。
section_overrides:
  "Verse 1":
    time_signature: "4/4" # ← 変更しない場合は省略可
    tempo_bpm: 88 # 88bpm ストレート
    humanize_profile: "soft_reflective"

  "Pre‑Chorus 1":
    time_signature: "3/4" # 3拍子へ転調！
    tempo_bpm: 93 # ほんのり加速
    humanize_profile: "gentle_push"

  "Chorus 1":
    time_signature: "4/4"
    tempo_bpm: 104 # アップテンポ
    humanize_profile: "super_drive"

  "Bridge":
    time_signature: "5/4" # 変拍子で緊張感
    tempo_bpm: 92
    humanize_profile: "oddmeter_drift"
    strings:
      humanize_profile: "soft_reflective"

  "Intro":
    humanize_profile: "soft_reflective"
  "Outro":
    humanize_profile: "gentle_push"
  "Sax Solo":
    time_signature: "4/4"
    tempo_bpm: 96
    humanize_profile: "gentle_push"
    melody:
      generator: sax
      rhythm_key: sax_basic_swing

# ---------------- 2. Sections to Generate ----------------
sections_to_generate:
  - "Verse 1"
  - "Pre-Chorus 1"
  - "Chorus 1"
  - "Verse 2"
  - "Chorus 2"
  - "Interlude"
  - "Bridge 1"
  - "Verse 3"
  - "Pre-Chorus 2"
  - "Chorus 3"
  - "Bridge 2"
  - "Verse 4"
  - "Chorus 4"
  - "Sax Solo"

# ------ 5. Humanize Profiles (central registry) ------
# humanizer.py で参照される辞書キーと対応。ここにまとめて記述しておくと
# YAML だけで全体バランスを調整できる。
humanize_profiles:
  soft_reflective:
    offset_ms: { mean: 0.0, stdev: 12.0 }
    velocity: { mean: -6.0, stdev: 4.0 }
    duration_pct: { mean: 102, stdev: 3 }
  gentle_push:
    offset_ms: { mean: -10, stdev: 5 }
    velocity: { mean: 0, stdev: 3 }
    duration_pct: { mean: 95, stdev: 2 }
  excited_drive:
    offset_ms: { mean: -8.0, stdev: 8.0 }
    velocity: { mean: +10.0, stdev: 8.0 }
    duration_pct: { mean: 96, stdev: 5 }
  oddmeter_drift:
    offset_ms: { mean: +3.0, stdev: 14.0 }
    velocity: { mean: -2.0, stdev: 5.0 }
    duration_pct: { mean: 101, stdev: 6 }
  my_custom_profile:
    offset_ms: { mean: -10.0, stdev: 4.0 }
    velocity: { mean: +6.0, stdev: 2.0 }
    duration_pct: { mean: 97, stdev: 3 }
  super_drive:
    offset_ms: { mean: -12.0, stdev: 10.0 }
    velocity: { mean: +14.0, stdev: 8.0 }
    duration_pct: { mean: 94, stdev: 6 }

# ---------------- 6. Reserved ------------------------
reserved:
  midi_export_settings: {}
  audio_rendering: {}
  lyrics_handling: {}
  future_parts: {}
controls:
  enable: true  # Controls ON（デフォルト）

duv:
  enable: false  # DUV OFF（まだモデル未訓練）
  # model_path: checkpoints/duv_universal.ckpt
  # scaler_path: checkpoints/scalers/universal_duv.json
  # mode: absolute
  # intensity: 0.9
# ---------------- Notes ------------------------------
# * section_overrides は processed_chordmap
#   とラベル一致させることで自動で適用されます。
# * humanize_profiles をカスタム追加すれば、各 Section / Part
#   で `humanize_profile: "custom_key"` と書くだけで適用可。
# * tempo_map.json は 1/8 音符粒度で BPM を記録したリスト形式。
#   section_overrides と併用する場合は、tempo_map を優先して
#   time‑varying BPM を適用し、セクション開始点でのスナップとして
#   overrides.tempo_bpm を使うのが推奨ワークフローです。
# ----------------------------------------------------
# modular_composer.py の main_cli() 関数内、または引数パーサー設定部分
