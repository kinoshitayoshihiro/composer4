name: Sax CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      MODC_BUILD_PLUGIN: OFF
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Verify alignment extras & plugins
        run: |
          python -m pip install -e .[alignment]
          python -m pip install pytest-asyncio
          python -m pip check
      - name: Install dependencies
        shell: bash
        run: |
          pip install -r requirements-dev.txt
          pip install mkdocs mkdocs-material mkdocstrings[python]
      - name: Build SaxPlugin
        shell: bash
        continue-on-error: true
        run: |
          pip install pybind11 cmake ninja
          cmake -S plugins/sax_companion -B sax_build -DMODC_BUILD_PLUGIN=ON
          cmake --build sax_build --config Release
      - name: Validate doc snippets
        shell: bash
        run: python scripts/check_docs_snippets.py
      - name: Verify docs
        shell: bash
        run: mkdocs build --strict
      - name: Build Docker image
        run: |
          docker build -t composer-test .
          size=$(docker image inspect composer-test -f '{{.Size}}')
          if [ "$size" -gt $((120*1024*1024)) ]; then
            echo "Docker image too big: $size" >&2
            exit 1
          fi
      - name: Run tests
        id: run_tests
        shell: bash
        run: |
          coverage run -m pytest -q
          coverage report --fail-under=92
      - name: Type check
        run: mypy --strict scripts/*.py utilities/*.py ml_models/*.py
      - name: Generate demo MIDI
        if: ${{ always() }}
        shell: bash
        run: make demo-sax
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: demo-mid-${{ matrix.os }}
          path: demos/*.mid

  delta-vocal:
    runs-on: ubuntu-latest
    env:
      PG_DELTA_VOCAL: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -e .[test]
          pip install mkdocs mkdocs-material mkdocstrings[python]
      - name: Verify docs
        run: mkdocs build --strict
      - name: Run vocal delta tests
        run: pytest \
          tests/test_vibrato_engine.py \
          tests/test_vocal_articulation_integration.py \
          tests/test_cli_vocal_articulation.py -q

  nightly:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
      - name: Run full tests
        run: pytest -q
